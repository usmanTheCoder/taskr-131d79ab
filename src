import { NextResponse } from "next/server";
import bcrypt from 'bcryptjs';
import prisma from '@/lib/prisma';

export async function POST(request: Request) {
  const body = await request.json();
  const { email, password } = body;

  const user = await prisma.user.findUnique({
    where: {
      email,
    },
  });

  if (!user) {
    return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);

  if (!isPasswordValid) {
    return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });
  }

  return NextResponse.json({ user });
}

import { createTRPCContext } from '@/lib/trpc';
import { appRouter } from '@/redux/rootReducer';
import { inferProcedureOutput } from '@trpc/server';
import { createTRPCServer } from '@trpc/server/adapters/next';

export async function GET(req: Request) {
  return await createTRPCServer({
    router: appRouter,
    createContext: createTRPCContext,
    responserMeta({ ctx, paths, type }) {
      if (paths && paths.length > 0) {
        const resolvedData = getResolvedData(paths, type.data);
        res.status(200).json(resolvedData);
      } else {
        res.status(200).json({ message: 'All OK' });
      }
    },
  })(req);
}

'use client';

import { SessionProvider } from 'next-auth/react';
import { Provider } from 'react-redux';
import { store } from '@/redux/store';
import { Toaster } from 'react-hot-toast';
import { Header, Sidebar, Footer } from '@/components/Layout';
import '@/styles/globals.css';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html>
      <body>
        <SessionProvider>
          <Provider store={store}>
            <div className="flex flex-col min-h-screen">
              <Header />
              <div className="flex flex-grow">
                <Sidebar />
                <main className="flex-grow">{children}</main>
              </div>
              <Footer />
            </div>
            <Toaster />
          </Provider>
        </SessionProvider>
      </body>
    </html>
  );
}

'use client';

import { lazy } from 'react';
import { useSession } from 'next-auth/react';
import { Spinner } from '@/components/UI';

const Home = lazy(() => import('@/components/Home'));

export default function Page() {
  const { status } = useSession();

  if (status === 'loading') {
    return <Spinner />;
  }

  return <Home />;
}

'use client';

import { Spinner } from '@/components/UI';
import { useSession } from 'next-auth/react';

export default function TasksLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const { status } = useSession();

  if (status === 'loading') {
    return <Spinner />;
  }

  return <div className="p-4">{children}</div>;
}

'use client';

import { TaskList, TaskForm } from '@/components/Task';
import { useAppSelector } from '@/redux/hooks';

export default function TasksPage() {
  const tasks = useAppSelector((state) => state.tasks.tasks);

  return (
    <div>
      <TaskForm />
      <TaskList tasks={tasks} />
    </div>
  );
}

'use client';

import { ButtonProps } from '@/types';

export const Button: React.FC<ButtonProps> = ({
  type = 'button',
  onClick,
  disabled = false,
  className,
  children,
}) => {
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`${className} ${
        disabled
          ? 'opacity-50 cursor-not-allowed'
          : 'opacity-100 cursor-pointer hover:scale-105 transition-all'
      }`}
    >
      {children}
    </button>
  );
};

'use client';

import { FormFieldProps } from '@/types';
import { forwardRef } from 'react';

export const FormField = forwardRef<HTMLInputElement, FormFieldProps>(
  (
    {
      label,
      type = 'text',
      value,
      onChange,
      onBlur,
      error,
      ...props
    },
    ref
  ) => {
    return (
      <div className="mb-4">
        <label htmlFor={props.id} className="block mb-2 font-bold">
          {label}
        </label>
        <input
          type={type}
          id={props.id}
          value={value}
          onChange={onChange}
          onBlur={onBlur}
          ref={ref}
          className={`w-full p-2 border border-gray-300 rounded ${
            error ? 'border-red-500' : ''
          }`}
          {...props}
        />
        {error && <p className="text-red-500 mt-1">{error}</p>}
      </div>
    );
  }
);

FormField.displayName = 'FormField';

'use client';

import { useState } from 'react';
import { useForm } from '@/hooks/useForm';
import { FormField, Button } from '@/components';
import { useAppDispatch } from '@/redux/hooks';
import { addTask } from '@/redux/taskSlice';
import { validateTaskForm } from '@/lib/validations';

export const TaskForm = () => {
  const dispatch = useAppDispatch();
  const { values, errors, handleChange, handleSubmit } = useForm(
    {
      title: '',
      description: '',
    },
    validateTaskForm,
    () => {
      dispatch(addTask(values));
      resetForm();
    }
  );

  const [isSubmitting, setIsSubmitting] = useState(false);

  const resetForm = () => {
    handleChange('title', '');
    handleChange('description', '');
  };

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    await handleSubmit();
    setIsSubmitting(false);
  };

  return (
    <form onSubmit={onSubmit} className="bg-white p-4 rounded shadow">
      <h2 className="text-xl font-bold mb-4">Add Task</h2>
      <FormField
        label="Title"
        id="title"
        value={values.title}
        onChange={(e) => handleChange('title', e.target.value)}
        error={errors.title}
      />
      <FormField
        label="Description"
        id="description"
        value={values.description}
        onChange={(e) => handleChange('description', e.target.value)}
        error={errors.description}
      />
      <Button
        type="submit"
        disabled={isSubmitting}
        className="bg-blue-500 text-white px-4 py-2 rounded"
      >
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </Button>
    </form>
  );
};

'use client';

import { FaGithub } from 'react-icons/fa';

export const Footer = () => {
  return (
    <footer className="bg-gray-800 text-white py-4 text-center">
      <div className="container mx-auto flex justify-between items-center">
        <p>&copy; {new Date().getFullYear()} Taskr. All rights reserved.</p>
        <a
          href="https://github.com/your-username/taskr"
          target="_blank"
          rel="noopener noreferrer"
          className="flex items-center"
        >
          <FaGithub className="mr-2" />
          GitHub
        </a>
      </div>
    </footer>
  );
};

'use client';

import { FaSignInAlt, FaSignOutAlt } from 'react-icons/fa';
import { useSession, signIn, signOut } from 'next-auth/react';
import Link from 'next/link';
import { Modal } from '@/components/UI';
import { useModal } from '@/hooks/useModal';

export const Header = () => {
  const { data: session } = useSession();
  const { isOpen, openModal, closeModal } = useModal();

  return (
    <header className="bg-gray-800 text-white py-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link href="/" className="text-2xl font-bold">
          Taskr
        </Link>
        <nav>
          <ul className="flex space-x-4">
            <li>
              <Link href="/tasks">Tasks</Link>
            </li>
            <li>
              {session ? (
                <button
                  onClick={() => signOut()}
                  className="flex items-center text-red-500"
                >
                  <FaSignOutAlt className="mr-2" />
                  Logout
                </button>
              ) : (
                <button
                  onClick={openModal}
                  className="flex items-center text-green-500"
                >
                  <FaSignInAlt className="mr-2" />
                  Login
                </button>
              )}
            </li>
          </ul>
        </nav>
      </div>
      <Modal isOpen={isOpen} onClose={closeModal}>
        <div className="p-4">
          <h2 className="text-xl font-bold mb-4">Login</h2>
          {/* Login form goes here */}
        </div>
      </Modal>
    </header>
  );
};

'use client';

import Link from 'next/link';
import { FaListAlt, FaPlus } from 'react-icons/fa';

export const Sidebar = () => {
  return (
    <aside className="bg-gray-800 text-white p-4 min-w-[200px]">
      <nav>
        <ul>
          <li className="mb-4">
            <Link
              href="/tasks"
              className="flex items-center text-white hover:text-gray-300"
            >
              <FaListAlt className="mr-2" />
              All Tasks
            </Link>
          </li>
          <li>
            <Link
              href="/tasks/new"
              className="flex items-center text-white hover:text-gray-300"
            >
              <FaPlus className="mr-2" />
              Add Task
            </Link>
          </li>
        </ul>
      </nav>
    </aside>
  );
};

'use client';

import { FaTrash, FaEdit } from 'react-icons/fa';
import { TaskCardProps } from '@/types';
import { useAppDispatch } from '@/redux/hooks';
import { deleteTask, toggleTaskCompletion } from '@/redux/taskSlice';
import { formatDate } from '@/utils/dateUtils';

export const TaskCard: React.FC<TaskCardProps> = ({
  task,
  onEdit,
}) => {
  const dispatch = useAppDispatch();

  const handleDeleteTask = () => {
    dispatch(deleteTask(task.id));
  };

  const handleToggleCompletion = () => {
    dispatch(toggleTaskCompletion(task.id));
  };

  return (
    <div
      className={`bg-white p-4 rounded shadow mb-4 ${
        task.completed ? 'opacity-50' : ''
      }`}
    >
      <div className="flex justify-between items-center mb-2">
        <h3
          className={`text-lg font-bold cursor-pointer ${
            task.completed ? 'line-through' : ''
          }`}
          onClick={handleToggleCompletion}
        >
          {task.title}
        </h3>
        <div className="flex">
          <button
            onClick={onEdit}
            className="text-blue-500 hover:text-blue-700 mr-2"
          >
            <FaEdit />
          </button>
          <button
            onClick={handleDeleteTask}
            className="text-red-500 hover:text-red-700"
          >
            <FaTrash />
          </button>
        </div>
      </div>
      <p className="text-gray-600">{task.description}</p>
      <p className="text-gray-500 mt-2">
        Due Date: {formatDate(task.dueDate)}
      </p>
    </div>
  );
};

'use client';

import { TaskCard } from './TaskCard';
import { TaskListProps } from '@/types';
import { useModal } from '@/hooks/useModal';
import { Modal } from '@/components/UI';
import { TaskForm } from '@/components/Form';
import { useState } from 'react';
import { useAppDispatch } from '@/redux/hooks';
import { updateTask } from '@/redux/taskSlice';

export const TaskList: React.FC<TaskListProps> = ({ tasks }) => {
  const { isOpen, openModal, closeModal } = useModal();
  const dispatch = useAppDispatch();
  const [editingTask, setEditingTask] = useState(null);

  const handleEditTask = (task) => {
    setEditingTask(task);
    openModal();
  };

  const handleUpdateTask = (updatedTask) => {
    dispatch(updateTask(updatedTask));
    setEditingTask(null);
    closeModal();
  };

  return (
    <>
      <div className="space-y-4">
        {tasks.map((task) => (
          <TaskCard
            key={task.id}
            task={task}
            onEdit={() => handleEditTask(task)}
          />
        ))}
      </div>
      <Modal isOpen={isOpen} onClose={closeModal}>
        <div className="p-4">
          <h2 className="text-xl font-bold mb-4">Edit Task</h2>
          <TaskForm
            initialValues={editingTask}
            onSubmit={handleUpdateTask}
          />
        </div>
      </Modal>
    </>
  );
};

'use client';

import { AlertProps } from '@/types';
import { FaExclamationTriangle } from 'react-icons/fa';

export const Alert: React.FC<AlertProps> = ({
  type = 'error',
  message,
}) => {
  const getAlertClasses = () => {
    switch (type) {
      case 'error':
        return 'bg-red-